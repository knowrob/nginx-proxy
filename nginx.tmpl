# server {
#         listen 80 default_server;
#         server_name _; # This is just an invalid value which will never trigger on a real hostname.
#         error_log /proc/self/fd/2;
#         access_log /proc/self/fd/1;
#         return 503;
# }


# upgrade header for websockets
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# 
# Start reverse proxy server
# More information: http://nginx.com/resources/admin-guide/reverse-proxy/
# 
server {
    listen 80 default_server;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # external name of the server
    server_name localhost data.open-ease.org test.example.com;
    proxy_buffering off;
    error_log /proc/self/fd/2;
    access_log /proc/self/fd/1;

    # iterates over all containers and creates 'location' entries
    {{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

      # websocket endpoints: /ws/<container-name>
      location /ws/{{ $host }}/ {
          {{ range $index, $value := $containers }}
                  {{ $addrLen := len $value.Addresses }}
                  {{/* If only 1 port exposed, use that */}}
                  {{ if eq $addrLen 1 }}
                          {{ with $address := index $value.Addresses 0 }}
                            proxy_pass http://{{ $address.IP }}:{{ $address.Port }};
                          {{ end }}

                  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
                  {{ else if $value.Env.VIRTUAL_PORT }}
                          {{ range $i, $address := $value.Addresses }}
                            {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
                            proxy_pass http://{{ $address.IP }}:{{ $address.Port }};
                            {{ end }}
                          {{ end }}
                  {{/* Else default to standard web port 80 */}}
                  {{ else }}
                          {{ range $i, $address := $value.Addresses }}
                                  {{ if eq $address.Port "80" }}
                                  proxy_pass http://{{ $address.IP }}:{{ $address.Port }};
                                  {{ end }}
                          {{ end }}
                  {{ end }}
          {{ end }}

          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "Upgrade";
          proxy_set_header Host $host;
	  proxy_set_header X-Real-IP $remote_addr;
	  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	  proxy_set_header X-Forwarded-Proto $scheme;

          proxy_redirect off;
          proxy_read_timeout 600s;
          # Path rewriting
          rewrite /ws/{{ $host }}/(.*) /$1 break;
      }

      # link webrob container to /
      {{ if eq $host "webrob" }}

        location / {
          {{ range $index, $value := $containers }}
                  {{ $addrLen := len $value.Addresses }}
                  {{/* If only 1 port exposed, use that */}}
                  {{ if eq $addrLen 1 }}
                          {{ with $address := index $value.Addresses 0 }}
                            proxy_pass http://{{ $address.IP }}:{{ $address.Port }};
                          {{ end }}

                  {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
                  {{ else if $value.Env.VIRTUAL_PORT }}
                          {{ range $i, $address := $value.Addresses }}
                            {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
                            proxy_pass http://{{ $address.IP }}:{{ $address.Port }};
                            {{ end }}
                          {{ end }}
                  {{/* Else default to standard web port 80 */}}
                  {{ else }}
                          {{ range $i, $address := $value.Addresses }}
                                  {{ if eq $address.Port "80" }}
                                  proxy_pass http://{{ $address.IP }}:{{ $address.Port }};
                                  {{ end }}
                          {{ end }}
                  {{ end }}
          {{ end }}

          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          include /etc/nginx/proxy_params;
      }
      {{ end }}      
    {{ end }}
}
